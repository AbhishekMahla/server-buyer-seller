generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  BUYER
  SELLER
}

enum ProjectStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  buyerProjects Project[] @relation("BuyerProjects")
  sellerBids    Bid[]     @relation("SellerBids")
  buyerReviews  Review[]  @relation("BuyerReviews")
  sellerReviews Review[]  @relation("SellerReviews")
}

model Project {
  id          String        @id @default(uuid())
  title       String
  description String
  budgetMin   Float
  budgetMax   Float
  deadline    DateTime
  status      ProjectStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  buyer   User   @relation("BuyerProjects", fields: [buyerId], references: [id])
  buyerId String

  bids          Bid[]
  selectedBid   Bid?    @relation("SelectedBid", fields: [selectedBidId], references: [id], onDelete: SetNull)
  selectedBidId String? @unique

  deliverables Deliverable[]
  review       Review?
}

model Bid {
  id                  String   @id @default(uuid())
  bidAmount           Float
  estimatedCompletion DateTime
  message             String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  seller   User   @relation("SellerBids", fields: [sellerId], references: [id])
  sellerId String

  selectedForProject Project? @relation("SelectedBid")
}

model Deliverable {
  id          String   @id @default(uuid())
  fileUrl     String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
}

model Review {
  id         String   @id @default(uuid())
  rating     Int      @db.SmallInt
  reviewText String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  buyer   User   @relation("BuyerReviews", fields: [buyerId], references: [id])
  buyerId String

  seller   User   @relation("SellerReviews", fields: [sellerId], references: [id])
  sellerId String

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String  @unique
}
